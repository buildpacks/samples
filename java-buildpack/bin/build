#!/usr/bin/env bash

download() {
  local url=${1:?}
  local out=${2:?}
  if which wget > /dev/null 2>&1; then
    wget -q -O - "$url" | tar pxz -C "$out" --strip-components=1
  else
    curl -sfL "$url" | tar pxz -C "$out" --strip-components=1
  fi
}

echo "---> Java buildpack"

set -eo pipefail

env_dir=$1/env
cache_dir=$2
launch_dir=$3

# Load user-provided build-time environment variables
if compgen -G "$env_dir/*" > /dev/null; then
  for var in "$env_dir"/*; do
    declare "$(basename "$var")=$(<"$var")"
  done
fi

echo "---> Installing JDK"

if [[ ! -f $launch_dir/jdk.toml ]]; then
  mkdir -p $launch_dir/jdk
  jdk_url="https://cdn.azul.com/zulu/bin/zulu8.28.0.1-jdk8.0.163-linux_x64.tar.gz"
  download "$jdk_url" "$launch_dir/jdk"
  mkdir -p $launch_dir/jdk/profile.d
  cat << EOF > $launch_dir/jdk/profile.d/jdk.sh
export JAVA_HOME=$launch_dir/jdk
export PATH=\$JAVA_HOME/bin:\$PATH
export LD_LIBRARY_PATH="\$JAVA_HOME/jre/lib/amd64/server:\$LD_LIBRARY_PATH"
EOF
  echo "version = \"1.8.0_163\"" > $launch_dir/jdk.toml

  # TODO put the jdk in the cache
  # TODO write to $cache_dir/jdk/env
fi
source $launch_dir/jdk/profile.d/jdk.sh

mkdir -p $cache_dir/maven/.m2
ln -s $cache_dir/maven/.m2 $HOME/.m2
MAVEN_OPTS="${MAVEN_OPTS:-"-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"}"

if [[ -x mvnw ]]; then
  echo "---> Running Maven Wrapper"
  ./mvnw clean install -B -DskipTests
else
  if [[ ! -f $cache_dir/maven.toml ]]; then
    echo "---> Installing Maven"
    maven_url="https://apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz"
    download "$maven_url" "$cache_dir/maven"
    echo "version = \"3.5.4\"" > $cache_dir/maven.toml
  fi
  export PATH=$PATH:$cache_dir/maven/bin

  echo "---> Running Maven"
  mvn clean install -B -DskipTests
fi

# Set default start command
for jarFile in $(find target -maxdepth 1 -name "*.jar" -type f); do
  echo "processes = [{ type = \"web\", command = \"java -jar $jarFile\"}]" > "$launch_dir/launch.toml"
  break;
done
