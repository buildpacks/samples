#!/usr/bin/env bash
set -eo pipefail

echo "---> Gradle buildpack"

# 1. GET ARGS
layers_dir="$1"
env_dir="$2/env"
plan_path="$3"

# 2. LOAD USER-PROVIDED BUILD-TIME ENVIRONMENT VARIABLES
if compgen -G "${env_dir}/*" > /dev/null; then
  for var in ${env_dir}/*; do
    declare "$(basename ${var})=$(<${var})"
  done
fi

# 3. INSTALL JAVA
HOST_PLATFORM=$(uname -m | sed s/aarch64/amd64/ | sed s/x86_64/x64/)
jdk_url="https://cdn.azul.com/zulu/bin/zulu8.40.0.25-ca-jdk8.0.222-linux_${HOST_PLATFORM}.tar.gz"
jdk_version="1.8.0_222"

if [[ -r /etc/alpine-release ]]; then
    jdk_url="https://cdn.azul.com/zulu/bin/zulu8.40.0.25-ca-jdk8.0.222-linux_musl_${HOST_PLATFORM}.tar.gz"
    jdk_version="1.8.0_222"
fi

echo "---> Installing JDK"

# If it doesn't exist locally, create a JDK cache layer
# This makes JDK available to subsequent buildpacks as well
jdk_layer_dir=${layers_dir}/jdk
if [[ -f ${jdk_layer_dir}.toml ]]; then
  cached_jdk_url=$(cat "${jdk_layer_dir}.toml" | yj -t | jq -r .metadata.url 2>/dev/null || echo 'JDK TOML parsing failed')
fi

if [[ ${jdk_url} != ${cached_jdk_url} ]] ; then
  rm -rf "$layers_dir"/jdk
  mkdir -p "$layers_dir"/jdk/env
  wget -q -O - "$jdk_url" | tar pxz -C "${jdk_layer_dir}" --strip-components=1

  cat > "${jdk_layer_dir}.toml" << EOF
launch = true
build = true
cache = true

[metadata]
version = "${jdk_version}"
url = "${jdk_url}"
EOF

  echo "$layers_dir"/jdk > "$layers_dir"/jdk/env/JAVA_HOME
  if [[ -z ${LD_LIBRARY_PATH} ]]; then
    echo "${JAVA_HOME}/jre/lib/amd64/server" > ${jdk_layer_dir}/env/LD_LIBRARY_PATH
  else
    echo "${JAVA_HOME}/jre/lib/amd64/server:${LD_LIBRARY_PATH}" > ${jdk_layer_dir}/env/LD_LIBRARY_PATH
  fi

  mkdir -p ${jdk_layer_dir}/profile.d
  cat > "${jdk_layer_dir}/profile.d/jdk.sh" << EOF
export JAVA_HOME=${jdk_layer_dir}
if [[ -z \$LD_LIBRARY_PATH ]]; then
  export LD_LIBRARY_PATH="\$JAVA_HOME/jre/lib/amd64/server"
else
  export LD_LIBRARY_PATH="\$JAVA_HOME/jre/lib/amd64/server:${LD_LIBRARY_PATH}"
fi
EOF
fi

# Set env variables to make jdk accessible
for var in "$layers_dir"/jdk/env/*; do
  declare "$(basename "$var")=$(<"$var")"
done
export PATH=${jdk_layer_dir}/bin:$PATH

# 4. MAKE GRADLE CACHE LAYER
gradle_layer_dir="${layers_dir}/gradle"

if [[ ! -d ${gradle_layer_dir} ]]; then
  mkdir -p ${gradle_layer_dir}
  echo "cache = true" > ${gradle_layer_dir}.toml
fi
ln -s ${gradle_layer_dir} $HOME/.gradle

# 5. RUN BUILD
echo "---> Running Gradle Wrapper"
./gradlew clean build -x test --no-daemon

# 6. SET DEFAULT START COMMAND
target_dir="build/libs"
for jar_file in $(find "$target_dir" -maxdepth 1 -name "*.jar" -type f); do
  cat >> "${layers_dir}/launch.toml" <<EOL
[[processes]]
type = "web"
command = "java -jar ${jar_file}"
EOL
  break;
done